import tkinter as tk
from tkinter import messagebox, simpledialog
import json

# hard-coded users
users = {
    "admin": "password123",
    "manager": "managerpass"
}

products_file = "products.json"
sales_file = "sales.json"

# load products
def load_products():
    try:
        with open(products_file, "r") as f:
            return json.load(f)
    except:
        return []

# save products
def save_products(products):
    with open(products_file, "w") as f:
        json.dump(products, f, indent=4)

# load sales
def load_sales():
    try:
        with open(sales_file, "r") as f:
            return json.load(f)
    except:
        return []

# save sales
def save_sales(sales):
    with open(sales_file, "w") as f:
        json.dump(sales, f, indent=4)

# ================= LOGIN WINDOW ==================

def check_login():
    username = username_entry.get()
    password = password_entry.get()
    if username in users and users[username] == password:
        messagebox.showinfo("Login Success", f"Welcome {username}!")
        root.destroy()
        open_inventory_window()
    else:
        messagebox.showerror("Login Failed", "Invalid username or password")

root = tk.Tk()
root.title("Inventory Login")

tk.Label(root, text="Username:").grid(row=0, column=0, padx=10, pady=10)
username_entry = tk.Entry(root)
username_entry.grid(row=0, column=1, padx=10, pady=10)

tk.Label(root, text="Password:").grid(row=1, column=0, padx=10, pady=10)
password_entry = tk.Entry(root, show="*")
password_entry.grid(row=1, column=1, padx=10, pady=10)

tk.Button(root, text="Login", command=check_login).grid(row=2, column=0, columnspan=2, pady=10)

# ================= INVENTORY WINDOW ==================

def open_inventory_window():
    inv_win = tk.Tk()
    inv_win.title("Inventory Management")

    tk.Label(inv_win, text="Inventory System", font=("Arial", 16)).pack(pady=10)

    tk.Button(inv_win, text="‚ûï Add Product", command=add_product).pack(pady=5)
    tk.Button(inv_win, text="üìã View Products", command=view_products).pack(pady=5)
    tk.Button(inv_win, text="üìù Edit Product", command=edit_product).pack(pady=5)
    tk.Button(inv_win, text="‚ùå Delete Product", command=delete_product).pack(pady=5)
    tk.Button(inv_win, text="‚ö†Ô∏è Low Stock Products", command=low_stock).pack(pady=5)
    tk.Button(inv_win, text="üí∞ Sell Product", command=sell_product).pack(pady=5)
    tk.Button(inv_win, text="üìä Sales Summary", command=sales_summary).pack(pady=5)
    tk.Button(inv_win, text="üö™ Exit", command=inv_win.destroy).pack(pady=10)

    inv_win.mainloop()

# ================= INVENTORY FUNCTIONS ==================

def add_product():
    products = load_products()
    name = simpledialog.askstring("Product Name", "Enter product name:")
    if not name:
        return
    try:
        quantity = int(simpledialog.askstring("Quantity", "Enter quantity:"))
        price = float(simpledialog.askstring("Price", "Enter price:"))
        products.append({
            "name": name,
            "quantity": quantity,
            "price": price
        })
        save_products(products)
        messagebox.showinfo("Success", f"Product '{name}' added!")
    except:
        messagebox.showerror("Error", "Invalid quantity or price.")

def view_products():
    products = load_products()
    if not products:
        messagebox.showinfo("Inventory", "No products found.")
        return
    output = ""
    for i, p in enumerate(products, start=1):
        output += f"{i}. {p['name']} - Qty: {p['quantity']} - ‚Çπ{p['price']}\n"
    messagebox.showinfo("Products", output)

def edit_product():
    products = load_products()
    if not products:
        messagebox.showinfo("Inventory", "No products found.")
        return
    names = [p['name'] for p in products]
    choice = simpledialog.askstring("Edit Product", f"Available: {', '.join(names)}\nWhich to edit?")
    found = None
    for p in products:
        if p['name'].lower() == choice.lower():
            found = p
            break
    if not found:
        messagebox.showerror("Error", "Product not found.")
        return
    new_qty = simpledialog.askstring("New Quantity", "Leave blank to keep same:")
    new_price = simpledialog.askstring("New Price", "Leave blank to keep same:")
    if new_qty:
        found['quantity'] = int(new_qty)
    if new_price:
        found['price'] = float(new_price)
    save_products(products)
    messagebox.showinfo("Success", "Product updated.")

def delete_product():
    products = load_products()
    if not products:
        messagebox.showinfo("Inventory", "No products found.")
        return
    names = [p['name'] for p in products]
    choice = simpledialog.askstring("Delete Product", f"Available: {', '.join(names)}\nWhich to delete?")
    new_products = [p for p in products if p['name'].lower() != choice.lower()]
    if len(new_products) == len(products):
        messagebox.showerror("Error", "Product not found.")
    else:
        save_products(new_products)
        messagebox.showinfo("Deleted", f"Product '{choice}' deleted.")

def low_stock():
    products = load_products()
    lows = [p for p in products if p['quantity'] < 5]
    if not lows:
        messagebox.showinfo("Low Stock", "All products sufficiently stocked.")
    else:
        msg = "\n".join([f"{p['name']} - Qty: {p['quantity']}" for p in lows])
        messagebox.showinfo("Low Stock Products", msg)

def sell_product():
    products = load_products()
    if not products:
        messagebox.showinfo("Inventory", "No products found.")
        return
    names = [p['name'] for p in products]
    choice = simpledialog.askstring("Sell Product", f"Available: {', '.join(names)}\nWhich to sell?")
    found = None
    for p in products:
        if p['name'].lower() == choice.lower():
            found = p
            break
    if not found:
        messagebox.showerror("Error", "Product not found.")
        return
    qty = simpledialog.askinteger("Quantity", "Enter quantity to sell:")
    if qty is None or qty <= 0:
        return
    if qty > found['quantity']:
        messagebox.showerror("Error", "Not enough stock.")
        return
    found['quantity'] -= qty
    save_products(products)

    sales = load_sales()
    sales.append({
        "product": found['name'],
        "quantity": qty
    })
    save_sales(sales)

    messagebox.showinfo("Sold", f"Sold {qty} of '{found['name']}'")

def sales_summary():
    sales = load_sales()
    if not sales:
        messagebox.showinfo("Sales Summary", "No sales yet.")
        return
    summary = ""
    totals = {}
    for sale in sales:
        totals[sale['product']] = totals.get(sale['product'], 0) + sale['quantity']
    for product, qty in totals.items():
        summary += f"{product}: {qty} sold\n"
    messagebox.showinfo("Sales Summary", summary)

root.mainloop()
